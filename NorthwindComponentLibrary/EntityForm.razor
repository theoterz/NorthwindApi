@*  For each property in the property list, the component generates a label for property name and a field which binds with the property's value for a certain entity.
    Furthermore there are validators for each property, that takes advantage of the property's atributes.
*@

<EditForm Model="Entity">
    
    <hr />
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    @foreach (var property in Properties)
    {   
        <div class="form-group row">
            
            <label for="@property.Name" class="col-sm-4 col-form-label"><b>@StringHelperClass.SplitCamelCase(property.Name)</b></label>
 
            <div class="col-sm-5">
               
                @*Depending on the property field, the compponent produces the proper field*@
                @if (property.PropertyType == typeof(bool))
                {
                    bool value = Convert.ToBoolean(propertyValues[property.Name.ToString()]);
                    <RadzenCheckBox id="@property.Name" TValue="bool" Value=@value Change=@(args => propertyValues[property.Name.ToString()] = args.ToString()) />
                }
                else if (property.PropertyType == typeof(DateTime?) || property.PropertyType == typeof(DateTime?))
                {
                    DateTime value = Convert.ToDateTime(propertyValues[property.Name.ToString()]);
                    <RadzenDatePicker id="@property.Name" TValue="DateTime" Value="value" Change=@(args => propertyValues[property.Name.ToString()] = args.ToString()) />
                }
                else
                {
                    //If the component is being used to Edit an Entity, then the input is disabled if the property is a primary key
                    bool isDisabled = (OperationName.Equals(OperationType.Edit) && Attribute.IsDefined(property, typeof(KeyAttribute)));
                    <input id="@property.Name" disabled="@isDisabled" class="form-control" @bind-value="propertyValues[property.Name.ToString()]" />
                }
                
                <ValidationMessage For="@(() => property)" />
            </div>

        </div>
    }
 
    <div style="margin-top: 50px">
        <RadzenButton Icon="save" Text="Save" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" Style="background-color:darkorange" Click="OnSaveClick"/>
        <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Light" Click="OnCancelClick" />
    </div>

    <hr />

</EditForm>
